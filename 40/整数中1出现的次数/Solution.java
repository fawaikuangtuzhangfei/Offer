package 整数中1出现的次数;

/**
 * 整数中1出现的次数（从1到n整数中1出现的次数）
 * 求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？
 * 为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,
 * 但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,
 * 可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。
 * 
 * 思路: 归纳总结规律
 * 取余10就是个位 取余100就是十位....
 * 
 * 当1在个位上时,每隔10个数为一组 共1个,0~9 1 10―~11 ....
 * eg:22 22/10=2(组)  22%10= 2>=1 ->还有1(组)
 * 
 * 所以给定一个数->x   count=x/10+(x%10>0?1:0)
 * 
 * 当1在十位上时,10 11 12 13...18 19 共10个,每隔100为一组 0~99 100~199 200~299...
 * eg:317 317/100=3(组)=30个 17<19 17-10+1=8(个)
 * eg:20 20/100=0组=0个 20%100=20 20>=19 10
 * 
 * 所以给定一个数->x   count=x/100+(x>19?10:x%100>10? x%100-10+1:0)
 * 
 * 当1在百位上时,100,101,102...199 共100个,每隔1000为1组 0~999 1000~1999 2000~2999
 * eg:2139 2139/1000=2(组)=200个  139<199 139-100+1=40(个)
 * 
 * 所以给定一个数->x    count=x/1000+(x>199?100:x%1000>100? x%1000-100+1:0)
 * 
 * 归纳:
 * 给定一个数n 位数是k(个位是1 十位是10 百位100) 
 * count=n/(k*10)*k + (n%(k*10)>=k*2-1? k:n%(k*10)>=k? n%(k*10)-k+1:0)
 * 
 * 
 * @author nanshoudabaojian
 *
 */
public class Solution {
    public static int NumberOf1Between1AndN_Solution(int n) {
    	int result = 0;
    	for(long i=1; i<=n; i=i*10){
    		result += n/(i*10)*i + (n%(i*10)>=i*2-1? i:n%(i*10)>=i? n%(i*10)-i+1:0);
    	}
    	return result;
    }
    public static void main(String[] args) {
		System.out.println(NumberOf1Between1AndN_Solution(10));
	}
}
